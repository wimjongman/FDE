/**
 */
package com.remainsoftware.fde.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import com.remainsoftware.fde.model.util.ModelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.Version} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionItemProvider versionItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.Version}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionAdapter() {
		if (versionItemProvider == null) {
			versionItemProvider = new VersionItemProvider(this);
		}

		return versionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.Manifest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManifestItemProvider manifestItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.Manifest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManifestAdapter() {
		if (manifestItemProvider == null) {
			manifestItemProvider = new ManifestItemProvider(this);
		}

		return manifestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.Bundle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BundleItemProvider bundleItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.Bundle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBundleAdapter() {
		if (bundleItemProvider == null) {
			bundleItemProvider = new BundleItemProvider(this);
		}

		return bundleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.Fragment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FragmentItemProvider fragmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.Fragment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFragmentAdapter() {
		if (fragmentItemProvider == null) {
			fragmentItemProvider = new FragmentItemProvider(this);
		}

		return fragmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.Description} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptionItemProvider descriptionItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.Description}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptionAdapter() {
		if (descriptionItemProvider == null) {
			descriptionItemProvider = new DescriptionItemProvider(this);
		}

		return descriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.SiteToVisit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SiteToVisitItemProvider siteToVisitItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.SiteToVisit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSiteToVisitAdapter() {
		if (siteToVisitItemProvider == null) {
			siteToVisitItemProvider = new SiteToVisitItemProvider(this);
		}

		return siteToVisitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.LicenseAgreement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LicenseAgreementItemProvider licenseAgreementItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.LicenseAgreement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLicenseAgreementAdapter() {
		if (licenseAgreementItemProvider == null) {
			licenseAgreementItemProvider = new LicenseAgreementItemProvider(this);
		}

		return licenseAgreementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.IncludedFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludedFeatureItemProvider includedFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.IncludedFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludedFeatureAdapter() {
		if (includedFeatureItemProvider == null) {
			includedFeatureItemProvider = new IncludedFeatureItemProvider(this);
		}

		return includedFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.Required} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredItemProvider requiredItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.Required}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiredAdapter() {
		if (requiredItemProvider == null) {
			requiredItemProvider = new RequiredItemProvider(this);
		}

		return requiredItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.IncludedBundleOrFragment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludedBundleOrFragmentItemProvider includedBundleOrFragmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.IncludedBundleOrFragment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludedBundleOrFragmentAdapter() {
		if (includedBundleOrFragmentItemProvider == null) {
			includedBundleOrFragmentItemProvider = new IncludedBundleOrFragmentItemProvider(this);
		}

		return includedBundleOrFragmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remainsoftware.fde.model.BREE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BREEItemProvider breeItemProvider;

	/**
	 * This creates an adapter for a {@link com.remainsoftware.fde.model.BREE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBREEAdapter() {
		if (breeItemProvider == null) {
			breeItemProvider = new BREEItemProvider(this);
		}

		return breeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (versionItemProvider != null) versionItemProvider.dispose();
		if (manifestItemProvider != null) manifestItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (bundleItemProvider != null) bundleItemProvider.dispose();
		if (fragmentItemProvider != null) fragmentItemProvider.dispose();
		if (descriptionItemProvider != null) descriptionItemProvider.dispose();
		if (siteToVisitItemProvider != null) siteToVisitItemProvider.dispose();
		if (licenseAgreementItemProvider != null) licenseAgreementItemProvider.dispose();
		if (includedFeatureItemProvider != null) includedFeatureItemProvider.dispose();
		if (requiredItemProvider != null) requiredItemProvider.dispose();
		if (includedBundleOrFragmentItemProvider != null) includedBundleOrFragmentItemProvider.dispose();
		if (breeItemProvider != null) breeItemProvider.dispose();
	}

}
